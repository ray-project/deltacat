[build-system]
build-backend = "maturin"
requires = ["maturin"]

[project]
name = "amzn-rivulet-prototype-python"
version = "1.0"
readme = "README.md"
dependencies = [
    "getdaft"
]

# TODO make compatible with 3.9 for ray / deltacat compatibility
requires-python = ">=3.10"

[tool.hatch.envs.default]
# This controls what version of Python you want to be the default
# when running any scripts or tools to do things like debug test failures
# or do general development.  Its lockfile is ./requirements.txt
installer = "pip"
python = "3.12"
# Ensure dependencies are duplicated in hatch-test env
dependencies = [
    "pytest",
    "mypy",
    # Core library
    "pyarrow",
    "fsspec",
    "intervaltree",
    # Pytorch integration
    # S3 support
    "s3fs",
    # Pytorch integration
    "torch",
    "numpy",
    "torchvision",
]
# Default hatch env will be installed to .venv and not include any optional dependencies
path = ".venv"

[tool.hatch.envs.hatch-test]
# Note that we need to duplicate dependencies from production env
# Hatch-test is a special environment used by the hatch test command
# I could not get inheritance working for hatch-test so using extra-dependencies outlined in:
#    https://hatch.pypa.io/1.12/config/environment/overview/#dependencies

extra-dependencies = [
    # Copied from tool.hatch.envs.default
    "pytest",
    "mypy",
    "pyarrow",
    "fsspec",
    "s3fs",
    "intervaltree",
    "torch",
    "numpy",
    "torchvision",
    # Copied from "testing" and "benchmark" features (used in dev env)
    "faker-file",
    "Pillow",
    "tabulate",
]
installer = "pip"
#  hatch does not use testpaths: https://github.com/pypa/hatch/issues/1452
default-args = ["tests/unit"]

# Dev hatch environment will be installed to .venv/dev
[tool.hatch.envs.dev]
python = "3.12"
type = "virtual"
features = ["testing", "benchmark"]
path = ".venv/dev"

[project.optional-dependencies]
testing = [
    "faker",
]
benchmark = [
    "faker-file",
    "Pillow", # for faker-file to generate images
    "tabulate",
]

[tool.maturin]
features = ["pyo3/extension-module"]

[tool.pytest.ini_options]
addopts = [
    "--durations=5",
    "--color=yes",
]
markers = [
    "benchmark: marks tests as benchmarks",
]
pythonpath = [
    "src"
]
testpaths = ["tests/unit"]

[tool.ruff.lint]
isort.known-first-party = ["amazon"]
exclude = ["./build", ".hatch", "private"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.hatch.build]
directory = "./build"

[tool.hatch.env]
requires = ["hatch-pip-compile"]

[tool.hatch.envs.default.scripts]
# These are scripts you can run using `brazil-build run <script-name>`
typing = [
    "mkdir -p .mypy_cache",
    "mypy --install-types --ignore-missing-imports --non-interactive src/rivulet tests"
]

# This command is for updating all your lock files across all environments 
update = ["hatch-pip-compile --upgrade --all"]

release = [
    # TODO fix typing errors
    #"typing",
    "hatch test --all --verbose",
]

[tool.hatch.envs.dev.scripts]
run = "pytest -m benchmark tests/benchmarking"

[[tool.hatch.envs.hatch-test.matrix]]
# This defines multiple variables you can generate combinations
# to test underneath different environments.  A separate environment and 
# lock file will be created for every combination located in `./requirements/`
python = ["3.11", "3.12"]

## This environment is used solely to generate a lock file on hatch,
# and hatch-pip-compile that can be automatically updated
[tool.hatch.envs.build-tools]
# This version states what version your build tools build with.  To change it,
# you will need to:
# * Remove the `requirements/requirements-build-tools.txt` file
# * Run `brazil-build run update` to generate a new lock file for the environment
python = "3.12"
detached = true
skip-install = true
dependencies = [
    "hatch",
    "hatch-pip-compile",
]

# PeruHatch repository and package locking plugin
[tool.hatch.env.collectors.custom]
path = ".hatch/hatch_plugin.py"

# This is necessary to use 'uv' as the resolver if this is the top-level package
# in a monorepo (which is usually the case).  Remove this if copying the
# package into a monorepo
[tool.uv.workspace]
